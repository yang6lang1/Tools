
********************************************************************************
Q1: pass-by-reference and pass-by-value
My understanding of the difference between these 2 is, if you pass a variable into a function by-reference, 
and that variable's value is changed inside of the function, the changes to the variable's value is also reflected outside of the function. 
Pass-by-value means simply the value in the variable is passed into a function, and the modification of the value won't affect the 
value in the original variable.

Everything in Java is pass-by-value
Eg:
	String x = "helloworld";
	giveMeString(x);
	System.out.println(x);
	
	public void giveMeString(String x){
		x = "This is a string";
	}

********************************************************************************
Q2: Overloading and Overriding
Overloading: same method name with different numbers or different names of parameters
	Overloading is a compile time phenomenon
Overriding: same method name with same parameters but different implementations(inheritance)
	Overriding happens at run time

********************************************************************************
Q3: Stack Implementation:
Discuss the stack data structure. Implement a stack in Java using either a linked list or a dynamic array, and justify your decision. 
Design the interface to your stack to be complete, consistent, and easy to use.

A stack is a first-in-last-out(FILO) data structure: Elements are always removed in the reverse order in which they were added. 
The add and remove element operations are conventionally called push and pop, respectively. 
Stacks are useful data structures for tasks that are divided into multiple subtasks. Tracking return addresses, parameters, 
and local variables for subroutines is one example of stack use; tracking tokens when parsing a programming language is another.

Usually there are two ways to implement a stack: using dynamic array or linked list
Dynamic array has the advantage of random access of any element in the array, while in linked list, elements can only be accessed by
traversing through the linked list. However, in a stack data structure, operations are only performed at the end of the stack so 
the advantage of dynamic array isn't very obvious. Furthermore, as dynamic array grows, it must occasionally resize itself which is time
consuming. Therefore, I will use a linked list to implement the stack for now.

First of all, I am going to design the interface of the stack

Stack
----
-size: int
-tail: ListItem<T>
----
+push(ListItem<T> item):void
+pull():ListItem<T>
+peek():ListItem<T>
+getSize():int
+removeAll():void
+toString():String
===============================
ListItem<T>
----
-next: ListItem<T>
-element: T
----

********************************************************************************
Q4: Bug finding strategy:
Find the bugs in the following C/C++ code:
void removeHead( Node *head){
  delete head;
  head = head ->next;
}

Do a systematic analysis of every line of the function without the help of a debugger.
Consider four common problem areas for any function you are given:
1. Check that the data comes into the function properly
2. Check that each line of the function works correctly.
3. Check that the data comes out of the function correctly.
4. Check the common error conditions.

********************************************************************************
Q5: Common Linked List problem #1:
Find Mth-to-Last element of a Linked List(time and space-efficient)
Approach 1: O(n)
1st declare a pointer that start from the head and traverse to the Mth item from the front of the list
2nd declare another pointer that start from the head
3rd traverse both of the pointers simultaneously until the first pointer hit the end, which means the second
	pointer is now point to the Mth-to-Last element (Smart!)

Approach 2:O(n + (n-m))
if the linked list has a getSize() function, just traverse from the front for (n-m) times
if the linked list doesn't have that function:
1st traverse the linked list to get a size n: O(n)
2nd traverse the first (n-m) items: O(n-m)

********************************************************************************
Q5: Common Linked List problem #2:
Flatten and unflatten the multi-layer linked list(use recursion and queue?)

Q6: Null or cycle:
Different approaches:
1. use inheritance, when traversing, mark each element with a boolean flag O( n )
2. check every ith element with the previous (i - 1) elements: O( n*(n-1)/2 ) = O(n^2)
3. (smartest approach) 2 pointes, fast and slow pointer, fast updates 2 items every time, slow updates one
	if its a cyclic, the slow pointer will eventually catch up the fast one

********************************************************************************
Chapter 5: Trees and Graphs
Trees:
A tree is made up of nodes (data elements) with zero, one, or several references to other nodes. Each node has only one other node referencing it.
Trees are often used to store sorted or ordered data. By far, the most common way to store data in a tree is using a special tree called 
a binary search tree(BST).
One advantage of a binary search tree is that the lookup operation is fast and simple.
Many tree operations can be implemented recursively.

Heaps: (an implementation of priority queue)
Another common tree is a heap. In heap, each child of a node has a value less than (min heap) or bigger than (max heap) the node's value.
if extracting the max or min value needs to be fast, then use a heap. O(1)

Back to trees:
Common searches
Breadth-First Search: (BFS)
search every level from left to right. The time to find a node is O(n), so this type of search is best avoided for large trees. A
BFS also uses a large amount of memory because it is necessary to track the child nodes for all nodes on a given level while searching that level.
Depth-First Search: (DFS)
A depth-first search follows one branch of the tree down as many levels as possible until the target node is found or the end is reached.

Traversals:
preorder reversal of a node performs the operation first on the node itself, then on its left descendants, and finally on its right descendants.
Inorder left-itself-right
postorder left-right-itself
If you are asked to implement a traversal, recursion is a good way to start thinking about the problem.

Graphs:
Graphs are mode complicated than trees. List trees, they consist of nodes with children. Unlike trees, a node can have multiple "parents",
possible creating a loop. In addition, the links between nodes, as opposed to the nodes themselves, may have values or weights. These
links are called edges because they may contain more information than just a pointers. In graph, edges can be one way or two way.
A graph with one0way edges is called a directed graph. A graph with only two-way pointers in called an undirected graph.

********************************************************************************
Binary Tree Problems:
Q6: Preorder Traversal
1. print out the root value
2. do a preorder traversal on the left subtree
3. do a preorder traversal on the right subtree

Q7: Preoder Traversal without using recursion
Explicitly using stack

1st. declare a stack
2nd. push the root onto stack
3rd. infinite loop 
	pop from stack	
	if node == null, quit loop
	otherwise, print node
	if left != null push left;
	if right != null push right;

********************************************************************************
Q8: Lowest Common Ancestor
Common way: make lists of all the ancestors of both nodes and then search these two lists to find the first node
where they differ. The node right above this divergence will be the lowest common ancestor.

Slightly more efficient way:
start from the node, the first node that has value between v1 and v2 is the lowest common ancestor.

********************************************************************************
Chapter 6: Arrays and Strings
In C/C++, an array name is equivalent to a pointer constant to the first element of the array. Which means you can't
initialize the elements of one array with another array using a simple assignment. You have to use memcpy().
In C/C++, compiler only tracks the location of the array, not the size. So it is programmer's responsibility to check 
the boundary condition of array.

In Java, each access to an array index is checked against the current size of the array and an exception is thrown if the index is out of bounds.
This makes array access a relatively expensive operation when compared to C/C++ arrays.
*** Multiple references to the same array element should be simplified by storing the value of the array element into a single variable.
When arrays are allocated, note that the elements in the array are not initialized, even if the array is declared to hold an object type.

C# arrays are similar to Java arrays. 

Strings:
Strings are sequences of characters.
Java:
Java strings are objects of the String class, a special system class.
Java strings are immutable: They cannot be changed once the string has been constructed. Methods that appear to modify a string actually
return a new string instance.

Example of using StringBuffer(more efficient way to manipulate String object):
StringBuffer b = new StringBuffer(); 
for( int i = 0; i < 10; ++i ){ 
	b.append( i ); 
	b.append( "s"); 
} 
String s = b.toString();

********************************************************************************
Array and String problem:
Q9: Find the first non-repeated character
Use either hashMap<Character, Integer> to keep track of the number of occurrence of each char
or use int[128](128 is the number of possible ASCII characters)

Q10: Remove Specified Characters
Save as Q9, use HashMap or boolean[128]

Q11: Reverse words:
Approach 1: use stack, keep pushing(don't forget the space);
Approach 2: start from the end of string, use a temp buffer to track whole word.
Approach 3: 1st reverse the string char by char, then reverse the word char by char 

Q12: Integer/String Conversions:
String to integer: 1 * 1000 + 3 * 100 + 2 *10 + 3 * 1 
Integer to String: 1371: 1 = 1371 % 10 / (10/10); 7 = 1371 % 100 / (100 / 10)....

********************************************************************************
Chapter 7: Recursion
Recursion is a deceptively simple concept: Any routine that calls itself is recursive.
Recursion is most useful for tasks that can be defined in terms of similar subtasks.
Recursive algorithms have two types of cases: recursive cases and base cases.

Although recursion is a very powerful technique, it is not always the best approach, and rarely
is it the most efficient approach. It is due to the relatively large overhead for routine calls on most platforms.
For a simple recursive routine like factorial, many computer architectures spend more time on call overhead than the actual calculation.
A recursive algorithm can be implemented without recursive calls by using a stack, but it is
usually more trouble than it's worth.

********************************************************************************
Q13: Binary Search:
Implement a function to perform a binary search on a sorted array of integers to find the index of a given
integer. Use this method declaration:
int binarySearch (int[] array, int lower, int upper, int target);
Comment on the efficiency of this search and compare it with other search methods.

(Implementation see RecursiveProblems.java)

Recursive implementations are generally less efficient than equivalent iterative implementations.
A binary search is O(logn) because half of the search is eliminated on each iteration. This is more efficient than a simple
search through all the elements, which would be O(n). However, in order to perform a binary search the array must be sorted,
an operation that is usually O(nLogn).

********************************************************************************
Chapter 9: Object-Oriented Programming
Object-oriented programming is a programming technique that uses classes as an abstract representation of real
world entities. A class can have variables and methods, which correspond to the entity's attributes and actions(give example).
Inheritance enables a class to provide a more detailed or specialized version of its parent class.

Polymorphism is the ability to provide multiple implementation of an action and to select the correct implementation based on the 
object type.

********************************************************************************
Interface and Abstract Classes:
Q14: Explain the difference between an interface and an abstract class in object-oriented programming.
-An interface declares a set of related methods, outside of any class.
-An abstract class is an incomplete class definition that declares but does not define all of its methods

Interface hides all the details of the classes that implement it from the user of the interface. It is really important in Java because,
unlike C++, Java doesn't support multiple inheritance.

Unlike interface, an abstract class is a proper class, which means it can have variables and method implementations. Unlike usual classes,
abstract classes can have incomplete methods that forces their children classes to provide an implementation. Abstract class can not
be instantiated directly.

********************************************************************************
Q15: Why do C# and Java disallow the multiple inheritance of classes? Ambiguity
Awesome example:
class A{
	protected :
		bool flag;
};

class B : public A{};
class C : public A{};

class D : public B, public C{
	public:
		void setFlag(bool argFlag){
			flag = argFlag; // ambiguous
		}
};

********************************************************************************
Chapter 12: Counting, Measuring, and Ordering Puzzles
Tackling Brainteasers:
One of the most important themes to keep in mind is that the solutions to brainteasers are almost never straightforward or obvious.
Solve the Right Problem
1. make assumptions, categorize them based on possibility
2. identify false assumptions and approach to the truth
Don't Be Intimidated
-break the problem into parts
-try simplify the problem
-try specific examples

Think outside of the box, don't be restricted by the constraints
Sometimes try to make a false assumption and see if that will work.

********************************************************************************
Non techincal Questions:
Do you use linux? - what the interviewer is really saying: "We're using Linux-will you be able to do the job even though you haven't used it?"
DON'T ANSWER "NO"
Sample answer: "I haven't used Linux specifically, but I have done Unix development."

Pay attention to the job description when it's explained to you. Emphasize any similar and relevant experience that makes you a strong candidate.
Questions:
Q16:
What do you want to do?
I was contacted by a Microsoft HR(Veronika) through linkedIn who suggested me to apply for Microsoft jobs. So I did. But at time, I do not 
know much about SDET in Microsoft. I assumed it involves a lot of manual test or regression test which are tedious and boring.
But later on, when I was doing researches on the position to study for this interview, I realized in Microsoft, testers are treated equally
as developers and they are coders as well....

Tester DNA has to include a natural ability to do systems level thinking, skills in problem decomposition, a passion for quality, 
and a love of finding out how something works and then how to break it. ... 
Now that is what makes up a tester that makes them different from a developer. 
The way we combine that DNA with engineering skills is by testing software. The name we choose should 
reflect this but also be attractive to the engineers we want to hire. Something that shows we use development skills to drive testing.

What do you know about Microsoft
Microsoft has raised a lot of great, legendary 
Jon Devaan: lead developer for Excel, Windows Vista SP1, Windows 7, Windows 8
Charles Simonyi
Bill Gates
Paul Allen
Steve Ballmer

Products:
Windows OS
Microsoft Office
Internet Explorer
Windows Phone
Surface Tablet
XBox
Skype
MSN
DirectX

********************************************************************************
Real Microsoft interview questions:
Technical questions:
Q1: Merge 2 sorted linked list:
Do something similar to mergeSort()'s merging part.

Q2: Different ways of sorting, going through an algorithm for combining and sorting 3 list of data.
Insertion sort, merge sort, heap sort.....(only mention the ones you know how to implement)(review heap sorting before interview)
combine and sort 3 list of data:
Question: are those 3 lists of data sorted already?
if not, sort them first O(nlogn) (better use mergeSort cuz im gonna use mergeSort-like method later)
and merge them (use 3 pointers)

Q3: check if you have a valid combination of '(', '{', '['.
I think this involves the use of stack.
1. Keep traversing thru the context, every time you encounter a '(', push a ')' onto the stack;
2. every time you encounter a right bracket, you pull from the stack and compare if they are the same type;
if there is a single violation, it is wrong
or if the context is finished but the stack is not empty, it is wrong
or if the stack is empty but you are trying to pull from it, it is wrong

Q4: Sort a list of words alpha-numerically
use any sorting algorithm you want. Start with with writing out the method signiture.

Q5: Merge two sorted arrays in place, with the second array having enough space to fit in the first. Do not create a new array. 
Ask questions
start from the end of the array and work your way to the front
analysis the algorithm
do not forget about the special cases

Q6: Find the angle between the hour, minute, and second hand on a clock at any given time
Ask questions: what about angle greater than 180 degree?
calculate each angle directly (clockwise, can be > 180) and subtract larger one with smaller one

Q7: Program a function that takes in two words and checks if the first is a substring of the second.
See StringProblems.java

Q8:Fill an integer matrix in a spiral fashion. Starting in the upper left corner and going clock-wise, 
	the next element should be one more than the previous.  
See RecursiveProblems.java

Q9:given the pointer to a head node that contains 2 pointers pointing to any other 2 nodes(like a simplified graph), 
	you need to make a deep copy of this graph.
I am not sure if my answer is correct:(question: is it possible for the children node to point to its ancestor?
if there isn't loop in the graph, you can use recursion to copy each subtree and assign that as the child for the root
it is similar to tree pre-order traversal

Q10: check if a BST is a valid BST
traverse the BST, check if each node has more than 2 children and if each node's left < root and root <= right

Brain teaser questions:
Q1: you have 9 marbles, all of them identical except one of them is slightly heavier than the rest. 
in order to determine which is the heaviest, you have a balancing scale, however you are only allowed to use it twice. 
how do you determine the heaviest marble?
Divide them into 3 3-marble group, measure 2 of them and eliminate 2/3 of them every time. You only need 2 tries;

Behavioral questions:
Elevator pitch:
First I have to apologize making it so early for you. Today is my first day of school and I have class right after this.

Q1: Tell me about yourself
My name is Alex Yang. I am a third year Computer Engineering student in SFU. I had just finished an 8-month Co-op as Junior
Application Developer in a software company. Even though I am in Engineering, I am also very passionate about computer science technologies 
such as application programming, game development, artificial intelligence(machine learning), networking stuff. I started learning programming 
by taking a C++ intro course, and after that I took a data structure course in Java. And then I finished a software engineering course and 
made an iPhone application in Objective-C. During my past Co-op, I had a lot of free time after work so I decided to do some side projects. 
As you can see from my Resume, both of the side projects that I listed were in Java so I am more proficient in Java than in other language right now. 
I know Microsoft uses C/C++ and C#, but from what I know, Java and C# are really similar. One of side projects is an individual project and another one 
is a team-project because I want to get some practice about managing the code using repositories. This is basically all my programming experience.
Oh! I forgot to mention that recently when I was working on my side project, I got really interested in 3D graphics rendering technology so I
started learning LWJGL(which is the Java port of OpenGL). I just finished the tutorial about shaders a few days ago. I know Microsoft uses DirectX
but I believe the knowledge about matrix math and shaders, textures are transferable.

TODO: self-starter(MIT OCW), passionate about technology, open for change, eager to learn new knowledge, team-oriented, easy-going
Never stop learning, keep developing problem-solving skills

Q2: Question about your previous employment
I actually experienced two different roles in my past Co-op. In first four month, I was working as a QA automation developer. I did manual regression
test on the User Interface of the company's product following the existing test plans. And later on, I started design and implement the automation
scripts in Selenium IDE so that the QA team can run my scripts at night. Selenium IDE is an open source tool used to perform UI automation test for
web applications. It uses XPath to find the elements in the web page and perform operations on it(eg: verify text, scroll, click).

In the second month, I was transferred into the developer team and started working on a project in a team of three developers. The project was about
implementing a new functionality for the company product. We were pretty lucky because the project is new and our supervisor was very co-op friendly.
We had the chance to experience the entire Agile development process. We set up meetings with Business Analysts to talk about the requirements.
We met with the head developer to finalize the design decision and walk through the code because he built the framework of the project. After the
implementation process, we merged, tested and reviewed the code. After this one round, we presented the project to Business Analysts again and 
make modifications based on the their requests.

(Side question for Q2: what is black-box testing and give me an example)
Black-box testing is a method in software testing which focuses on the functionality of the product. Black-box testing does not require the
tester to know how exactly the function is implemented. They know need to test the expected behavior.

Q3: Personal projects
I have worked on 2 side projects so far, both are Java 2D games that run on desktop and both are rendered using Java Swing.
The first one is a customizable pinball game called Gizmoball, which is inspired by a course project of MIT OCW. I worked on this project individually for four months
and learned a lot of stuff, such as how to build application interface using Java Swing, OOP of course, basic collision detections, and also the 
basics of XML because I implemented an XML parser and reader to save and load the game configurations. Unfortunately, the game was pretty buggy
and I didn't realize what I did wrong until the late stage of the development. I figured out the problem after doing a lot of research and realized
it is a bad idea to track the game objects using their pixel positions because pixels are always integers, it is almost inevitable to have tunnelling
effect if the object moves too fast. I did my research, and that brought me into my second side project.

The second project, Blockadia, is a game engine built on top of a 2D physics engine called JBox2D, which is a Java port of Box2D. Box2D is the physics engine used by Angry Bird. 
In my second project, I worked with a friend and used GitHub to manage the code, the bug issues and the versions of the project. My friend took charge of the user interface and I 
was working on the game back-end including simple frame-based sprite animation, collision handling, user input handling and the 2D viewport camera with the ability of
zooming in/out and dragging to move the view. I have finished creating a spaceship demo game using my game engine and wrapped it into an executable file so if you are interested,
I can send it to you right away. From this project, I got a lot of practice on OOP and became more proficient with the use of some more advanced Java features such as generics, abstract
class, input listeners in Java Swing because they are used everywhere. This project also expanded my horizon and made me realize how many things I want to learn. I became
very interested in things like Thread programming, Networking topics(TCP, UDP),  and game graphics rendering. I started learning OpenGL because of this.

Q4: School projects
CPA(Community Police Assistant) 95% of the coding. Meet with team for interface design. Learned SQL/SQLite by myself and implemented the database/server connection in Objective-C

Q5: What do you want to do?
I am interested in a lot of computer science technologies. For example, application development, game programming, 3D graphics rendering technologies, Networking topics(TCP UDP).
I put application development as my top choice because it suits my current programming experience. Most of my programming practice are related to that field so 
I believe I can start being productive asap and also learn a lot of stuff. Also I am currently learning OpenGL by myself. ....(talk about OpenGL and DirectX)

Q6: What is your favorite programming language(computer, operating system)?
(Many ppl develop almost religious attachment to certain languages, computers or operating systems. suit the problem at hand
Believe that no language is a universal solution)
So far, since I've been using a lot of Java, Java language is the one that I am most comfortable with. But apparently, due to a lot of reasons, Java is very slow. It
designed to be portable, secure and for fast development so it won't be able to fit into some situation. What I believe is, these computer languages are all just
embodiment of technologies and they are changing everyday. I am very open for change and always willing to learn new stuff.

Q7: What are your career goals? (Why you want this job?-apart from the money; How you see it fit into your overall career)
I am hope to work in development for a while and work on some challenging projects. Then, I'm looking to go into project management and design.

Q8: Why do you leave your last job?(What doesn't interest you)

Q9: Why should we hire you?
I am a strong self-starter, and I am always eager to learn new stuff. 

Q10: Do you have any questions?
Can you give me an example of the daily responsibilities of this job?
What skills and attributes do you value most for someone being hired for this position?

Q11: Why do you want to work for Microsoft?
Probably you have been tired of hearing this, but Microsoft windows is the OS I grew up with. Ever since I was young, Bill Gates' story has always been inspiring me to become
a tech person. I am also interested in a lot of CMPT technologies, such as... Microsoft is just wide enough to include all the possibilities. I believe everyone can do their
best work if they are working in something they are interested in, that is why I want to work for Microsoft.

Q12: Tell me about a time when you had a heavy workload. How did you handle it?  
First of all, I believe this situation can be avoided by doing good time management....
Share with team mate. Negotiate with customers. Split the task and rank different subtasks based on the priority, try to finish high priority ones.

Q13: what was the most difficult technical problem you have encounter and how you go about solving it
I have ran into a lot of challenging problems during last co-op and when I was working on my personal project, one of them is quite unforgettable.
When I worked on my pinball game, when I just finished the physics part, there's always random bugs happen when there are so many objects in the game world. I narrowed down the 
possible places where the bug occurs by using a lot of ways of testing. For example, I did unit testing on the important methods, set up break points when the game is running,
and create special game configurations just for that case. Finally, I found the problem was caused by the data structure I used to store all the game objects. I was originally
using array and the problem didn't occur when there were only a few objects. So I did a lot of research and implemented a Quadtree that separates the game objects by the regions they 
occupied. And that successfully solved a lot of related bugs.
********************************************************************************
First-round Microsoft question:
1. Why do you want to work for Microsoft
Microsoft has contributed so much to the world and gained such a high reputation. Honestly speaking,
it is attractive to everyone in my age. But more importantly, Microsoft to me is more like a window
to the world. It has so many world-scale products that is using technologies that I am interested in
such as 3D graphics engine, networking and cloud technology. I believe people do their best work when
they are working on thing they are interested in, and same applies to me.
I'm a do-er, which can be proved by my independent projects and SFU Hackathon. Once I discover a 
technology that interests me, I will set goals for myself and start taking actions to achieve those
goals. Before the SFU Hackathon, I had no experience of Windows API or image processing. But in that
24 hours, I learned how to compress image and convert the image into grayscale by manipulating its RGBA.
We even attempted to make our first TCP/IP client socket and transferred the processed image data to the
server.

2. Tell me about your project experience


3. Tell me about the most difficult problem that you ran into and how you solved it
4. Test a Microsoft keyboard
5. Design an alarm clock for blind people
6. 3 buckets of fruit, identify them
7. Questions for them?
