Interview checklist:
-	What do they want to know from me in this particular interview
-	What can I say to stand out
-	Know your Resume: read P29 Cracking Code Interview
-	Prepare great questions to ask back
-	Follow-up/thank-you email
-	Must-have knowledge: P32

- Sorting algorithms:
bubble sort
selection sort
merge sort
quick sort
bucket sort(counting sort)

Facebook Internview:
- Algorithm Knowledge
	ask a lot of questions to understand the problem
	explain your solution
	why this algorithm is better (space & time efficiency)
	start from easy one and optimize

- Coding 
	1 or 2 coding questions using http://collabedit.com/
	take the hint to improve the coding
	show thinking process and problem solving skills
	use the links to practice coding puzzles

- Culture Fit
	research news about
	Communicate well - hierarchical way -> top down: Situation Action Result
	describe project: overview, detail, involvement, problems, solution, talk about the project from beginning to end, improvement, what you learned
	why working for Facebook, from an engineering point of view: interested in Facebook technology

- Ask Questions
	See if you can ask questions to narrow down the problems

- Others
	coding, algorithm questions in my best language, design patterns, and more specific questions to your background
	data structures, binary trees, linked lists, object oriented analysis/design
	ASK GOOD QUESTIONS AT THE END

************************************************************
Interview Questions
************************************************************
Difference between Java and C++
1. Java doesn't have pointers, it uses reference
2. Java does not allow multiple class inheritance while C++ does.
3. Java runs in a virtual machine. C++ compiles the code into assembly language
4. C++ natively supports unsigned algorithm
5. In Java, parameters are always pass by value. In C++, parameters can be passed by value, reference, pointer
6. Java has built-in garbage collection
7. C++ allows operator overloading. Java only allows method overloading.


************************************************************
Array & String:
************************************************************
1. Write a method to decide if two strings are anagrams or not.
-	approach1: sort both strings O(nlogn)
-	approach2: traverse both strings to get an array of character count
* learned int array initialization: cannot use term " int[] a1,a2 = new int[256] " => "int[] a1 = new int[256], a2 = new int[256]"

2. Write a method to replace all spaces in a string with %20
* learned that Java does not support c style string(null-terminated string)

3. NxN matrix, each pixel is 4 bytes, write a method to rotate the image by 90 degrees.
* approach the problem systematically. think about the reason why each variable is used.

4. Write an algorithm such that if an element in an MxN matrix is 0, its entire row and column is set to 0
* be careful that all the matrix will become 0 if you set 0 while traversing!
-	approach, keep track which row and which col contains 0 after first round of traversing, and then set
-	use int[] or HashSet <- this is better

5. Assume you have a method isSubstring which checks if one work is a substring of another. Given two strings, 
s1 and s2, write code to check if s2 is a rotation of s1 using only one call to isSubstring 
("waterbottle", "erbottlewat")
-	approach: concatenate s1 with itself, use the function call to check if s2 is a substring of the string
* think outside of the box!!!

************************************************************
Linked Lists
************************************************************
1. Write code to remove duplicates from an unsorted linked list
How to do this if temporary buffer is not allowed?

2. Implement an algorithm to find the kth to last element of a singly linked list
-	approach: have 2 pointers

3. Implement algorithm to delete a node in the middle of a singly linked list, given only access to that node
-	Similar to my SAP interview questions

4. You have two numbers represented by a linked list, where each node contains a single digit. The digits are stored in reverse order, 
such that the 1's digit is at the head of the list. Write function to add two numbers and returns the sum as a linked list.
-	traverse both linked list together, add carry bit to the next iteration

5. Given a circular linked list, implement an algorithm which returns the node at the beginning of the loop.
  
6. reverse print a singly linked list	
  
************************************************************
Stacks and Queues
************************************************************
1. Describe how you would use a single array to implement three stacks
-	question:	what to put in the stack: T

2. Design a stack which do push, pull, min all in O(1) time.
-	Use additional stack to track the min

3. implement sub-stacks to mimic the behavior of a large stack, also implement popAt(index)
// an int to track which substack it is in

4. Implement a MyQueue class which implements a queue using two stacks
-	push everything to a newElementStack, when pull, keep poping the newElementStack until it is in reverse order

5. Write a program to sort a stack in ascending order (with biggest items on top). Use at most one additional
stack to hold items, but you may not copy the elements into another data structure. The stack supports the 
following operations: push pop peek and isEmpty

6. An animal shelter holds only dogs and cats, and operates on a strictly "first in, first out" basis.
implement "enqueue, dequeueAny, dequeueDog, dequeueCat"
-	two linkedlist to implement two arrays, for the Animal class, enqueue with a timestamp variable
-	when dequeue, check the head of both dog and cat queue to see which one arrives first
-	enqueue: addLast; dequeue: poll, peek 

************************************************************
Sorting Algorithms
************************************************************
1. Selection sort
-	find the largest value, put at the back

2. Insertion sort
-	traverse the array, whenever find a smaller element, insert it at the correct place and shift all data behind

3. Merge sort
-	break the array into smallest pair, and merge

4. Quick sort
-	1. choose a pivot point: leftmost, mid, median of first mid and last
-	2. move the pivot to the last/first position, sort the rest of the array in place by
	partitioning it into 2 sub-arrays
-   3. move the pivot back to its final position
-	4. recursively sort the sub-arrays

************************************************************
Trees and Graphs
************************************************************
